[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, Some(e648f610-a99e-4e90-804c-e815a5198e15), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@2f60cbf2, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///d%3A/M1/ACF/TP89/TP89_ACF/src/main/scala/validator/ConcreteValidator.scala","languageId":"scala","version":1,"text":"package validator.Kasim\n\nimport bank._\n\n\n// Automatic conversion of bank.message to tp89.messages and Nat to bank.Nat\nobject Converter{\n  implicit def bank2message(m:bank.message):tp89.message=\n    m match {\n    case bank.Pay((bank.Nat.Nata(c),(bank.Nat.Nata(m),bank.Nat.Nata(i))),bank.Nat.Nata(p)) => tp89.Pay((Nat.Nata(c),(Nat.Nata(m),Nat.Nata(i))),Nat.Nata(p))\n    case bank.Ack((bank.Nat.Nata(c),(bank.Nat.Nata(m),bank.Nat.Nata(i))),bank.Nat.Nata(p)) => tp89.Ack((Nat.Nata(c),(Nat.Nata(m),Nat.Nata(i))),Nat.Nata(p))\n    case bank.Cancel((bank.Nat.Nata(c),(bank.Nat.Nata(m),bank.Nat.Nata(i)))) => tp89.Cancel((Nat.Nata(c),(Nat.Nata(m),Nat.Nata(i))))\n  }\n  \n  implicit def trans2bankTrans(l:List[((Nat.nat,(Nat.nat,Nat.nat)),Nat.nat)]): List[((bank.Nat.nat,(bank.Nat.nat,bank.Nat.nat)),bank.Nat.nat)]=\n    l match {\n    case Nil => Nil\n    case ((Nat.Nata(c),(Nat.Nata(m),Nat.Nata(i))),Nat.Nata(p))::r => ((bank.Nat.Nata(c),(bank.Nat.Nata(m),bank.Nat.Nata(i))),bank.Nat.Nata(p))::trans2bankTrans(r)\n  }\n}\n\nimport Converter._\n\n\n/* The object to complete */\nclass ConcreteValidator extends TransValidator{\nvar bdd:List[((Nat.nat, (Nat.nat, Nat.nat)), tp89.state[Nat.nat])] = List()\n\n  // TODO\n  def process(m:message):Unit={ bdd= tp89.traiterMessage(m,bdd) }\n\n  // TODO\n  def getValidTrans= tp89.export(bdd)\n\n}\n\nobject HOL {\n\ntrait equal[A] {\n  val `HOL.equal`: (A, A) => Boolean\n}\ndef equal[A](a: A, b: A)(implicit A: equal[A]): Boolean = A.`HOL.equal`(a, b)\nobject equal {\n  implicit def `Product_Type.equal_prod`[A : equal, B : equal]: equal[(A, B)] =\n    new equal[(A, B)] {\n    val `HOL.equal` = (a: (A, B), b: (A, B)) =>\n      Product_Type.equal_proda[A, B](a, b)\n  }\n  implicit def `Nat.equal_nat`: equal[Nat.nat] = new equal[Nat.nat] {\n    val `HOL.equal` = (a: Nat.nat, b: Nat.nat) => Nat.equal_nata(a, b)\n  }\n}\n\ndef eq[A : equal](a: A, b: A): Boolean = equal[A](a, b)\n\n} /* object HOL */\n\nobject Code_Numeral {\n\ndef integer_of_nat(x0: Nat.nat): BigInt = x0 match {\n  case Nat.Nata(x) => x\n}\n\n} /* object Code_Numeral */\n\nobject Product_Type {\n\ndef equal_proda[A : HOL.equal, B : HOL.equal](x0: (A, B), x1: (A, B)): Boolean =\n  (x0, x1) match {\n  case ((x1, x2), (y1, y2)) => HOL.eq[A](x1, y1) && HOL.eq[B](x2, y2)\n}\n\n} /* object Product_Type */\n\nobject table {\n\nabstract sealed class option[A]\nfinal case class Somea[A](a: A) extends option[A]\nfinal case class Nonea[A]() extends option[A]\n\ndef assoc[A : HOL.equal, B](uu: A, x1: List[(A, B)]): option[B] = (uu, x1) match\n  {\n  case (uu, Nil) => Nonea[B]()\n  case (x1, (x, y) :: xs) =>\n    (if (HOL.eq[A](x, x1)) Somea[B](y) else assoc[A, B](x1, xs))\n}\n\ndef modify[A : HOL.equal, B](x: A, y: B, xa2: List[(A, B)]): List[(A, B)] =\n  (x, y, xa2) match {\n  case (x, y, Nil) => List((x, y))\n  case (x, y, (z, u) :: r) =>\n    (if (HOL.eq[A](x, z)) (x, y) :: r else (z, u) :: modify[A, B](x, y, r))\n}\n\n} /* object table */\n\nobject Lista {\n\ndef member[A : HOL.equal](x0: List[A], y: A): Boolean = (x0, y) match {\n  case (Nil, y) => false\n  case (x :: xs, y) => HOL.eq[A](x, y) || member[A](xs, y)\n}\n\n} /* object Lista */\n\nobject tp89 {\n\nabstract sealed class state[A]\nfinal case class Validated[A](a: A) extends state[A]\nfinal case class InProgressC[A](a: A) extends state[A]\nfinal case class InProgressM[A](a: A) extends state[A]\nfinal case class Canceled[A]() extends state[A]\n\nabstract sealed class message\nfinal case class Pay(a: (Nat.nat, (Nat.nat, Nat.nat)), b: Nat.nat) extends\n  message\nfinal case class Ack(a: (Nat.nat, (Nat.nat, Nat.nat)), b: Nat.nat) extends\n  message\nfinal case class Cancel(a: (Nat.nat, (Nat.nat, Nat.nat))) extends message\n\ndef export(x0: List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]):\n      List[((Nat.nat, (Nat.nat, Nat.nat)), Nat.nat)]\n  =\n  x0 match {\n  case Nil => Nil\n  case (tid, x) :: xs => (x match {\n                            case Validated(y) => (tid, y) :: export(xs)\n                            case InProgressC(_) => export(xs)\n                            case InProgressM(_) => export(xs)\n                            case Canceled() => export(xs)\n                          })\n}\n\ndef returnAllKeys(x0: List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]):\n      List[(Nat.nat, (Nat.nat, Nat.nat))]\n  =\n  x0 match {\n  case Nil => Nil\n  case (tid, idState) :: bdd => tid :: returnAllKeys(bdd)\n}\n\ndef traiterMessagePay(tid: (Nat.nat, (Nat.nat, Nat.nat)), n: Nat.nat,\n                       bdd: List[((Nat.nat, (Nat.nat, Nat.nat)),\n                                   state[Nat.nat])]):\n      List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]\n  =\n  (if (Lista.member[(Nat.nat, (Nat.nat, Nat.nat))](returnAllKeys(bdd), tid))\n    (table.assoc[(Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat]](tid, bdd) match\n       {\n       case table.Somea(Validated(_)) => bdd\n       case table.Somea(InProgressC(x)) =>\n         (if (Nat.less_nat(x, n))\n           table.modify[(Nat.nat, (Nat.nat, Nat.nat)),\n                         state[Nat.nat]](tid, InProgressC[Nat.nat](n), bdd)\n           else bdd)\n       case table.Somea(InProgressM(x)) =>\n         (if (Nat.less_nat(x, n))\n           table.modify[(Nat.nat, (Nat.nat, Nat.nat)),\n                         state[Nat.nat]](tid, Validated[Nat.nat](n), bdd)\n           else bdd)\n       case table.Somea(Canceled()) => bdd\n     })\n    else (tid, InProgressC[Nat.nat](n)) :: bdd)\n\ndef traiterMessageAck(tid: (Nat.nat, (Nat.nat, Nat.nat)), n: Nat.nat,\n                       bdd: List[((Nat.nat, (Nat.nat, Nat.nat)),\n                                   state[Nat.nat])]):\n      List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]\n  =\n  (if (Lista.member[(Nat.nat, (Nat.nat, Nat.nat))](returnAllKeys(bdd), tid))\n    (table.assoc[(Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat]](tid, bdd) match\n       {\n       case table.Somea(Validated(_)) => bdd\n       case table.Somea(InProgressC(x)) =>\n         (if (Nat.less_nat(x, n))\n           table.modify[(Nat.nat, (Nat.nat, Nat.nat)),\n                         state[Nat.nat]](tid, InProgressM[Nat.nat](n), bdd)\n           else bdd)\n       case table.Somea(InProgressM(x)) =>\n         (if (Nat.less_nat(x, n))\n           table.modify[(Nat.nat, (Nat.nat, Nat.nat)),\n                         state[Nat.nat]](tid, InProgressM[Nat.nat](n), bdd)\n           else bdd)\n       case table.Somea(Canceled()) => bdd\n     })\n    else (tid, InProgressC[Nat.nat](n)) :: bdd)\n\ndef traiterMessage(x0: message,\n                    bdd: List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]):\n      List[((Nat.nat, (Nat.nat, Nat.nat)), state[Nat.nat])]\n  =\n  (x0, bdd) match {\n  case (Pay(tid, x), bdd) => traiterMessagePay(tid, x, bdd)\n  case (Ack(tid, x), bdd) => traiterMessageAck(tid, x, bdd)\n  case (Cancel(tid), bdd) =>\n    table.modify[(Nat.nat, (Nat.nat, Nat.nat)),\n                  state[Nat.nat]](tid, Canceled[Nat.nat](), bdd)\n}\n\n} /* object tp89 */\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Disposing 1 top-level windows..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Waiting 2 s to let AWT thread exit."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[AWT-Shutdown,5,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Thread-6,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Interrupting thread AWT-EventQueue-0"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"\tInterrupted AWT-EventQueue-0"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[TimerQueue,5,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Java2D Disposer,10,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[AWT-Windows,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Thread-7,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"\tThread AWT-Shutdown exited."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Interrupting remaining threads (should be all daemons)."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Disposing 1 top-level windows..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Waiting 2 s to let AWT thread exit."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Thread-6,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[TimerQueue,5,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Java2D Disposer,10,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[AWT-Windows,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Not interrupting system thread Thread[Thread-7,6,system]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Sandboxed run complete.."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Exited with code 0"})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 174 s (02:54), completed 6 déc. 2020 17:53:46[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
